# relex2logic-rules.txt
#
# Rules for RelEx2Logic, format is:
# [NAME] {PRIORITY} <EXCLUSION> RelEx criteria1 & criteria2 & ... => Scheme function
#
# =====================================================================================================
# SENTENCE PREDICATE-ARGUMENT TEMPLATES (whose sceme-rules also handle who / what questions)
# =====================================================================================================

[BE] {3} <SVO, SV> _subj(be, $subj) & _obj(be, $obj) => (be-inheritance-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

################## This rule has not been ported to atomese; I haven't been able to get any _%copula output from relex; I think it's gone away.
[COPULA] {2} <> _subj(_\%copula, $subj) & _obj(_\%copula, $obj) => (be-inheritance-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[SVIO1] {2} <SVO, SV> _iobj($verb, $iobj) & _obj($verb, $obj) & _subj($verb, $subj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))

[SVIO2] {2} <SV, SVO> _subj($verb, $subj) & _obj($verb, $obj) & _pobj(to, $iobj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index ) $iobj (get-instance-name $iobj word_index sentence_index))

################## This rule also has not been ported to atomese; I'm not sure it's still needed; I think between the previous rule and the new advmod rule, it's covered (but I'm not sure) . . . 
[SVIO3] {2} <SVO, SV> _subj($verb, $subj) & _obj($verb, $obj) & _advmod($verb, to) & _pobj(to, $iobj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index ) $iobj (get-instance-name $iobj word_index sentence_index))

[SVO] {3} <SV, SVIO1, SVIO2, SVIO3, BE, whichobjQ, whichsubjQ> _subj($verb, $subj) & _obj($verb, $obj) => (SVO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[SV] {4} <SVO, SVIO1, SVIO2, SVIO3, BE, COPULA-YNQ, TOBE> _subj($verb, $subj) => (SV-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index))

[SP] {4} <ALLRULE3, whichpredadjQ> _predadj($subj, $predadj) => (SV-rule $subj (get-instance-name $subj word_index sentence_index) $predadj (get-instance-name $predadj word_index sentence_index))

[PREP] {5} <> _psubj($prep, $subj) & _pobj($prep, $obj) => (SVO-rule $subj (get-instance-name $subj word_index sentence_index) $prep (get-instance-name $prep word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[TOBE] {3} <SV> _to-be($verb, $adj) & _subj($verb, $subj) => (to-be-rule $verb (get-instance-name $verb word_index sentence_index) $adj (get-instance-name $adj word_index sentence_index) $subj (get-instance-name $subj word_index sentence_index))

# ======================================================================================================
# Speech acts (awaiting revision and implementation) -- ########### these rules have not been ported to atomese yet
# =====================================================================================================
[IMPERATIVE] {1} <DECLARATIVE> tense($verb, imperative) => (imperative-rule interpretation_index)
[INTERROGATIVE] {1} <DECLARATIVE, TRUTHQUERY> QUERY-TYPE(_\$qVar, $query) => (interrogative-rule interpretation_index)
[TRUTHQUERY] {2} <DECLARATIVE, TRUTHQUERY> TRUTH-QUERY-FLAG($verb, T) => (truth-query-rule interpretation_index)
[DECLARATIVE] {3} <IMPERATIVE, INTERROGATIVE, TRUTHQUERY> pos(\., punctuation) => (declarative-rule interpretation_index)
#================================================================================================
# Question rules
#================================================================================================
# Yes / No (closed) question rules
#===========================================================================================================================
[COPULA-YNQ] {1} <PREDICATE-YNQ, BE, SV, SVO, SVIO1, SVIO2, SVIO3> TRUTH-QUERY-FLAG(be, T) & _subj(be, $subj) & _obj(be, $obj) => (cop-ynQ-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
[PREDICATE-YNQ] {2} <COPULA-YNQ> TRUTH-QUERY-FLAG($verb, T) => (pred-ynQ-rule $verb (get-instance-name $verb word_index sentence_index))
#=================
# Where questions
#=================
[where-Q] {3} <wherecop-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation($verb, _\$qVar) => (where-rule $verb (get-instance-name $verb word_index sentence_index))
[wherecop-Q] {2} <where-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (wherecop-Q-rule $s (get-instance-name $s word_index sentence_index))
#================
# When questions
#================
[when-Q] {3} <whencop-Q, prepwhen-Q> QUERY-TYPE(_\$qVar, when) & _%atTime($verb, _\$qVar) => (when-rule $verb (get-instance-name $verb word_index sentence_index))
[whencop-Q] {2} <when-Q, prepwhen-Q> QUERY-TYPE(_\$qVar, when) & _%atTime(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (whencop-Q-rule $s (get-instance-name $s word_index sentence_index))
#===============
# Why questions
#===============
[why-Q] {3} <whycop-Q> QUERY-TYPE(_\$qVar, why) & _%because($verb, _\$qVar) => (why-rule $verb (get-instance-name $verb word_index sentence_index))
[whycop-Q] {2} <why-Q> QUERY-TYPE(_\$qVar, why) & _%because(_\%copula, _\$qVar) & _subj(_\%copula, $subj) => (whycop-Q-rule $subj (get-instance-name $subj word_index sentence_index))
#===========================
# How of manner
#==========================
[how-Q] {3} <PREDICATE-YNQ> QUERY-TYPE(_\$qVar, how) & _%how($verb, _\$qVar) => (how-rule $verb (get-instance-name $verb word_index sentence_index))
#============================
# Predicative How
#============================
[howpredadj1-Q] {1} <how-Q> QUERY-TYPE(_\$qVar, how) & _%how(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (howpredadj-Q-rule $s (get-instance-name $s word_index sentence_index))
# the rule below has not been ported to atomese; it did not seem needed (?)
[howpredadj2-Q] {1} <how-Q> QUERY-TYPE(_\$qVar, how) & _subj(_\$qVar, $s) => (howpredadj-Q-rule $s (get-instance-name $s word_index sentence_index))
#===================
# How of quantity
#===================
[howquantQ] {1} <SVO> QUERY-TYPE(_\$qVar, how_much) & _quantity($x, _\$qVar) => (howquantQ-rule $x (get-instance-name $x word_index sentence_index))
#===================
# How of degree 
#===================
[howdegQ] {1} <SV> QUERY-TYPE(_\$qVar, how_much) & _%howdeg($pred, _\$qVar) => (howdegQ-rule $pred (get-instance-name $pred word_index sentence_index))
#=============================================
# DETERMINER-WHICH QUESTIONS
#=============================================
[whichobjQ] {1} <SVO, SV, QDET, QDETPREDADJ> QUERY-FLAG($o, T) & _obj($v, $o) & _subj($v, $s) & _det($o, _\$qVar) => (whichobjQ-rule $o (get-instance-name $o word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $s (get-instance-name $s word_index sentence_index))
[whichsubjQ] {1} <SV, SVO, QDET, QDETPREDADJ> QUERY-FLAG($s, T) & _subj($v, $s) & _obj($v, $o) & _det($s, _\$qVar) => (whichsubjQ-rule $s (get-instance-name $s word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $o (get-instance-name $o word_index sentence_index))
[whichpredadjQ] {1} <SVP, SV, QDET, QDETPREDADJ> QUERY-FLAG($s, T) & _predadj($s, $pred) & _det($s, _\$qVar) => (whichpredadjQ-rule $s (get-instance-name $s word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))
[whichiobjQ] {1} <SVO, SV, SVIO3> QUERY-FLAG($io, T) & _obj($v, $o) & _subj($v, $s) & to($v, $io) & _det($io, _\$qVar) => (whichiobjQ-rule $s (get-instance-name $s word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $o (get-instance-name $o word_index sentence_index) $io (get-instance-name $io word_index sentence_index))

########### Not done these yet, because I can't find the qtype in the atomspace relex output
#==================================
# DETERMINER PREPOSITIONAL-PHRASE-QUESTION-WORDS (e.g. "in which way?"
#==================================
[QDET] {2} <> _det($noun, _\$qVar) & QUERY-TYPE(_\$qVar, $qtype) & _subj($verb, $subj) => (q-det-rule $noun (get-instance-name $noun word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $qtype)
[QDETPREDADJ] {2} <> _det($noun, _\$qVar) & QUERY-TYPE(_\$qVar, $qtype) & _predadj($subj, $verb) => (q-det-rule $noun (get-instance-name $noun word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $qtype)

#=============================================
# END OF QUESTION RULES!
#=============================================

# ============================================
# adjective, adverb rules
# ============================================

[AMOD] {3} <> _amod($N, $A) => (amod-rule $N (get-instance-name $N word_index sentence_index) $A (get-instance-name $A word_index sentence_index))

[ADVMOD] {4} <> _advmod($V, $ADV) => (advmod-rule $V (get-instance-name $V word_index sentence_index) $ADV (get-instance-name $ADV word_index sentence_index))

# this rule was not ported becaus it was completely redundant.  Relex now treatS all adverbials as _advmod.
[ADVERBIALPP] {4} <> _pobj($prep, $noun) & _advmod($verb, $prep) => (advmod-rule $verb (get-instance-name $verb word_index sentence_index) $prep (get-instance-name $prep word_index sentence_index))

[ADJECTIVALPP] {4} <> _pobj($prep, $noun) & _prepadj($noun, $prep) => (amod-rule $noun (get-instance-name $noun word_index sentence_index) $prep (get-instance-name $prep word_index sentence_index))

[PP] {4} <> _pobj($prep, $noun) => (pp-rule $prep (get-instance-name $prep word_index sentence_index) $noun (get-instance-name $noun word_index sentence_index))

[RELATIVE_CLAUSE] {4} <> _rel($comp, $pred) => (complement-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

[COMPLEMENT_PHRASES] {4} <> _comp($comp, $pred) => (complement-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

[COMPlEMENT_RELATION] {4} <> _compmod($pred, $comp) => (compmod-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

[COMPlEMENT_BECAUSE] {4} <> _%because($pred, $comp) => (because-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

[COMPlEMENT_ATTIME] {4} <> _%atTime($pred, $comp) => (attime-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

[COMPlEMENT_REP] {4} <> _rep($pred, $comp) => (rep-rule $comp (get-instance-name $comp word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))

# ============================================
# unary rules
# ============================================

### I'm not porting this rule because I would need to see the atomspace relex output for an entity-FLAG and nobody knows how to get one
[ENTITYFLAG] {2} <> entity-FLAG($x, T) => (entity-rule $x (get-instance-name $x word_index sentence_index))

[GENDER] {2} <> person-FLAG($x, T) & gender($x, $gender) => (gender-rule $x (get-instance-name $x word_index sentence_index) $gender)

### haven't ported this one yet because it's unclear how do do it in atomese, except by mentioning each tense . . .
[TENSEPOS] {5} <> tense($x, $Tense) & pos($x, verb) => (tense-rule $x (get-instance-name $x word_index sentence_index) $Tense)

#### I ported this rule except I changed it to the demdet rule since actually it only does demonstrative determiners, and not all the other kinds of determiners
[DET] {6} <> _det($noun, $det) & definite-FLAG($noun, T) => (det-rule $noun (get-instance-name $noun word_index sentence_index) $det (get-instance-name $det word_index sentence_index))

# Example: "I do not eat injera.", "The cat is not small."
[NEGFLAG] {7} <> NEGATIVE-FLAG($x, T) & pos($x, $x_POS) => (negative-rule (get-instance-name $x word_index sentence_index) $x_POS)

# for definite words
[DEFINITE] {8} <> definite-FLAG($A, T) => (definite-rule $A (get-instance-name $A word_index sentence_index))

### Also haven't ported this rule yet, partially because i don't know how to do that without using a very long choicelink and partially because the rule seems
### weird to begin with; it needs to be part of an entire modal system, that needs to be thought out . . .
# maybe rule documented on http://wiki.opencog.org/w/RelEx2Logic_Rules#Maybe_Rule
# Example: "Maybe she eats lunch.", "Perhaps she is nice."
[MAYBE] {3} <ADVMOD> _advmod($x, (maybe|possibly|perhaps|probably)) => (maybe-rule $x (get-instance-name $x word_index sentence_index))

# ============================================
# misc rules
# ============================================

# I changed this to a 'quantity-rule' when I ported it because there is no _num_quantity relation anymore as far as I can tell
[NUM] {1} <> _num_quantity($iobj, $Num) => (number-rule $iobj (get-instance-name $iobj word_index sentence_index) $Num (get-instance-name $Num word_index sentence_index))

### I have no idea why this preposition was singled out for its own rule, but I'm not porting it that way; it's silly.
[ABOUT] {2} <> about($V, $N) => (about-rule $V (get-instance-name $V word_index sentence_index) $N (get-instance-name $N word_index sentence_index))

### right, here's another silly one.  It would classify all nominal nouns with the n1 inheriting n2, which is far from correct . . . 
[PRENOMINAL] {1} <> _nn($N1, $N2) => (nn-rule $N1 (get-instance-name $N1 word_index sentence_index) $N2 (get-instance-name $N2 word_index sentence_index))

[POSS] {8} <> _poss($N, $iobj) => (possessive-rule $N (get-instance-name $N word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))

#################### I just want to point out that, like everything else about R2L, somebody just made rules for a few of the possible structures, sort of arbitraily, if you consider
#################### the main sentence types (SV, SVO, SVIO, prep, predadj, be), there are more to-do rules left to be invented, and there are other forms of sentential complementation,
#################### and in the current implementation all of them would need to to have seperate rules for each question type, however, if I have time before I leave I will try to complete
#################### some of that in a more efficient way . . . this is why I tried to get people to talk about switching to a one-rule - one-dependency-relation system . . . another way
#################### is using if-then branches in the scheme helpers like I did to treat some question types within the SV, SVO, etc. rules. You can look a those if you want to do that to these.
#################### (AN June 2015)
# ============================================
# "to do" rules
# ============================================
# Example: "She wants to help John."
[TODO1] {1} <TODO2> _to-do($V1, $V2) & _obj($V2, $O) & _subj($V1, $S) => (to-do-rule-1 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S (get-instance-name $S word_index sentence_index) $O (get-instance-name $O word_index sentence_index))

# Example: "She wants you to help John."
[TODO2] {1} <TODO1> _to-do($V1, $V2) & _obj($V2, $O) & _subj($V1, $S1) & _subj($V2, $S2) => (to-do-rule-2 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S1 (get-instance-name $S1 word_index sentence_index) $S2 (get-instance-name $S2 word_index sentence_index) $O (get-instance-name $O word_index sentence_index))

#################### What about "She wants you to sing?" what about SVIO, prep, and be, with and without a second subject?
# Example: "She wants to sing."
[TODO5] {2} <TODO1, TODO2> _to-do($V1, $V2) & _subj($V1, $S) => (to-do-rule-5 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S (get-instance-name $S word_index sentence_index))

#################### I am not porting this because it is such an arbitray selection of one out of so many possible combinations of modals, and verbs -- I mean what about "she must want to sing?"
#################### "She will be able to sing" "she might need to sing?" Why a rule for just this one? A whole system is needed. Arghh
# Example: "She must be able to sing."
[TODO4] {1} <TODO3> _to-do(able, $V1) & _predadj($V2, able) => (to-do-rule-4 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index))

#################### What about the SVO, SVIO, be and prep versions of this? Not ported yet.
# Example: "She is nice to help with the project."
[TODO3] {2} <TODO4> _to-do($V1, $V2) & _predadj($V3, $V1) => (to-do-rule-3 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $V3 (get-instance-name $V3 word_index sentence_index))

# ============================================
# all rules
#
# "All Canadians are right-handed."
# "All my writings are bad.",
# "All Canadians give their dogs a hug."
# "All Canadians write."
# "All right-handed Canadians write."
# ============================================
########### I also have not ported these two rules because the first one is already handled by the general quantity-rule and the second one has no scheme helper yet, and seems like
########### it should be handled by a general "predeterminer" rule anyway.

[ALLRULE1] {1} <> _quantity($noun, all) => (all-rule (get-instance-name $noun word_index sentence_index))

[ALLRULE2] {1} <> _predet($noun, all) => (all-rule (get-instance-name $noun word_index sentence_index))

################## all rules above this line, except where otherwise noted, have been ported (AN June 2015) ######################################################################

# ============================================
# passive verb rules
# ============================================

[PASSIVE1] {1} <PASSIVE2> _obj($A,$B) & by($A,$C) & tense($A, (.*)passive) => (passive-rule1 $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index) $C (get-instance-name $C word_index sentence_index))

[PASSIVE2] {1} <PASSIVE1> _obj($A,$B) & tense($A, (.*)passive) => (passive-rule2 $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))

# ============================================
# conjunction rules
# ============================================
# Example: "I did my homework, and I went to school."
# Example: "John and Madison eat the cake."
[AND] {1} <> conj_and($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (and-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

[BUT] {1} <> conj_but($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (but-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

[OR] {1} <> conj_or($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (or-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

# ============================================
# that rules for object clause, content clause, complement clause, etc, but not adjective clause
# ============================================
# skipping adjective clause
[THAT-EXCL-1] {100} <> that($A, $B) & pos($A, noun) => '() ; ignoring adjective clause between $A and $B 
[THAT-EXCL-2] {100} <> that($A, $B) & pos($B, noun) => '() ; ignoring adjective clause between $A and $B 

# general that-rule works for any pos
[THAT1] {110} <THAT-EXCL-1, THAT-EXCL-2> that($A, $B) => (that-rule $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))
[THAT2] {110} <THAT-EXCL-1, THAT-EXCL-2> _that($A, $B) => (that-rule $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))

# ============================================
# time rules for dealing with temporal expressions
# ============================================
[BEFORE] {100} <> before($subj, $verb) & pos($verb, $verb_pos) => (before-after-rule (get-instance-name $subj word_index sentence_index) (get-instance-name $verb word_index sentence_index) $verb_pos "before")
[AFTER] {100} <> after($subj, $verb) & pos($verb, $verb_pos) => (before-after-rule (get-instance-name $subj word_index sentence_index) (get-instance-name $verb word_index sentence_index) $verb_pos "after")
[TIME] {100} <> _time($period, $hour) & at($verb, $period) => (time-rule $hour $period (get-instance-name $verb word_index sentence_index))

